pragma solidity ^0.5.0;

// First SmartContract will build the basis of the registry.
// unsigned integer of 256 bits: uint

contract SmartCarSharingRegistry {

    event CarSharingContractCreated(uint timestamp, address newCarSharingContractAddress, address sharer, uint8 capacity);
    address[] contracts;

    function createShare(uint8 _capacity) public {

        address newCarSharingContract = address(new SmartCarSharingContract(msg.sender, _capacity));
        contracts.push(newCarSharingContract);
        
        emit CarSharingContractCreated(block.timestamp, newCarSharingContract, msg.sender, _capacity);
    }

    function getShares() external view returns (address[] memory) {
        return contracts;
    }

    function getNumShares() external view returns (uint) {
        return contracts.length;
    }
    
    function getWODScore() external view returns (uint) {
        return WODScore
    }

}



// WOD Score = Way of driving score, zusammengefasst aus allen bisherigen Mieten. Wir müssen noch eine Function schreiben, in der der Vermieter bestimmen kann, 
bis zu welchem WOD Score Mieten möglich sind


contract SmartCarSharingContract {

    event RegDriver(uint timestamp, uint DriversLicence); function set(address DriverAddress) public view returns (address) {               // Driver is registered, function sets address
            address public};                                                        
    event CreateWOD(uint timestamp, address DriverAddress, uint WODScore): function set(uint x) public {                                    // WOD is created
            WODScore = x;
    }
    
    
    event RegSharer(uint timestamp, address SharerAddress, uint Vehicle): function set(address, uint) public {
            SharerAddress, vehicle};
            
    event SharerAccepted(uint timestamp, address SharerAddress, uint Vehicle);
    event CreateVehicle(uint timestamp, address SharerAddress, uint Vehicle; uint WODScore): function set(address, uint) public {           //Accepted WOD defined, Vehicle defined, SharerAddress defined
            SharerAddress, Vehicle, WODScore}
    
    event RequestedVehicles(uint timestamp, address DriverAddress, uint WODScore): function get() public view returns {
            return VehicleLocation};
            
    event RequestedBooking(uint timestamp,  address DriverAddress, address SharerAddress, uint Vehicle, uint WODScore): function get(uint){
            return BookingRequest};
            
    event AcceptedBooking(uint timestamp, address DriverAddress, address SharerAddress, uint Vehicle, uint WODScore); 
    
    event SendLocation(uint timestamp, address DriverAddress, address SharerAddress, uint Vehicle, uint VehicleLocation): function get(uint){
            return VehicleLocation};
            
    event DepositPayment(uint timestamp, address DriverAddress, address SharerAddress, uint depositAmount):  
                function payDeposit() external payable onlySharer hasSigned {
                require(msg.value == addressToTenant[msg.sender].depositAmount,
                "Amount of provided deposit does not match the amount of required deposit");

                require(addressToDriver[msg.sender].hasPaidDeposit == false, "The driver has already paid the deposit");

                deposit += msg.value;
                addressToDriver[msg.sender].hasPaidDeposit = true;

                emit DepositPayed(block.timestamp, msg.sender, msg.value)};
    
    event StartBooking(uint timestamp, addressDriverAddress, address SharerAddress, uint depositAmount, uint Vehicle): function(){
            return BookingStart};
    
    event UnlockVehicle(uint timestamp, addressDriverAddress, address SharerAddress, uint Vehicle, uint TCU); function send(address DriverAddress, uint TCU){
            return UnlockVehicle};
    event EndBooking(uint timestamp, address DriverAddress, address SharerAddress, uint Vehicle, uint TCU);
    event LockVehicle(uint timestamp, addressDriverAddress, address SharerAddress, uint Vehicle, uint TCU);
    event DeterminePayment(uint timestamp, address DriverAddress, address SharerAddress, uint Vehicle, uint TCU, uint WODScoreMultiple; uint WODScoreSingle);
    event DepositRefund (uint timestamp, address DriverAddress, address SharerAddress, uint Vehicle, uint WODScoreMultiple, uint WODScoreSingle, uint PaymentAmount, uint DepositAmount)
    
 
  

    struct Driver {
        uint rentAmount;
        uint depositAmount;
        bool hasSigned;
        bool hasPaidDeposit;
        uint WODScore;
        bool WODScoreAccepted;
        bool initialized;
        bool TCUfine;
    }

    mapping(address => Driver) public addressToDriver;
       Driver[] public Drivers;

    address payable public SharerAddress;
    string public writtenContractIpfsHash;

    uint8 public DriverOccupancy = 0;

    uint deposit;
    uint8 public DRIVER_CAPACITY;


    }

    modifier onlyDriver() {
        require(addressToDriver[msg.sender].initialized == true, "Only a driver can invoke this functionality");
        _;
    }

    modifier onlySharer() {
        require(msg.sender == SharerAddress, "Only a sharer can invoke this functionality");
        _;
    }

    modifier isBookingAccepted() {
        require(!(isSameString(BookingAccepted, "")), "The booking has not been accepted yet");
        _;
    }
    
     modifier notZeroAddres(address addr){
        require(addr != address(0), "0th address is not allowed!");
        _;
    }

  function isSameString(string memory string1, string memory string2) private pure returns (bool) {
    return keccak256(abi.encodePacked(string1)) == keccak256(abi.encodePacked(string2));
  }
}
